// <auto-generated />
using System;
using GSoft.AbpZeroTemplate.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GSoft.AbpZeroTemplate.Migrations
{
    [DbContext(typeof(AbpZeroTemplateDbContext))]
    [Migration("20180911025311_AddEntity")]
    partial class AddEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin");

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState");

                    b.Property<int>("ReceiverReadState");

                    b.Property<Guid?>("SharedMessageId");

                    b.Property<int>("Side");

                    b.Property<int?>("TargetTenantId");

                    b.Property<long>("TargetUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("FriendProfilePictureId");

                    b.Property<string>("FriendTenancyName");

                    b.Property<int?>("FriendTenantId");

                    b.Property<long>("FriendUserId");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("TenantAddress");

                    b.Property<string>("TenantLegalName");

                    b.Property<string>("TenantTaxNo");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EditionId");

                    b.Property<int>("Gateway");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PaymentId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("PaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AdsPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link");

                    b.HasKey("Id");

                    b.ToTable("AdsPages");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AlepayTransactionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlepayToken")
                        .HasColumnName("alepayToken");

                    b.Property<string>("Amount")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("BankCode")
                        .HasColumnName("bankCode");

                    b.Property<string>("BankHotline")
                        .HasColumnName("bankHotline");

                    b.Property<string>("BankName")
                        .HasColumnName("bankName");

                    b.Property<string>("BuyerEmail")
                        .HasColumnName("buyerEmail");

                    b.Property<string>("BuyerName")
                        .HasColumnName("buyerName");

                    b.Property<string>("BuyerPhone")
                        .HasColumnName("buyerPhone");

                    b.Property<string>("Cancel")
                        .HasColumnName("cancel");

                    b.Property<string>("CardNumber")
                        .HasColumnName("cardNumber");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<string>("CodePricesPackages");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasColumnName("currency");

                    b.Property<string>("Data");

                    b.Property<string>("Data1");

                    b.Property<string>("Data2");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("Email");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("errorCode");

                    b.Property<int?>("IdPackagePrices");

                    b.Property<int?>("IdUser");

                    b.Property<string>("Installment")
                        .HasColumnName("installment");

                    b.Property<string>("Is3D")
                        .HasColumnName("is3D");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("Message")
                        .HasColumnName("message");

                    b.Property<string>("Method")
                        .HasColumnName("method");

                    b.Property<string>("Month")
                        .HasColumnName("month");

                    b.Property<string>("OrderCode")
                        .HasColumnName("orderCode");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("Status")
                        .HasColumnName("status");

                    b.Property<string>("SuccessTime")
                        .HasColumnName("successTime");

                    b.Property<string>("TransactionCode")
                        .HasColumnName("transactionCode");

                    b.Property<string>("TransactionTime")
                        .HasColumnName("transactionTime");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AlepayTransactionInfos");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AnnouncementUser", b =>
                {
                    b.Property<int>("AnnouncementId");

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<bool>("HasRead");

                    b.HasKey("AnnouncementId", "UserId");

                    b.HasIndex("AnnouncementId")
                        .HasName("IX_AnnouncementId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AnnouncementUsers");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("ActiveDt")
                        .HasColumnName("ActiveDT")
                        .HasColumnType("datetime");

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("ApproveDT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus");

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ChargeDt")
                        .HasColumnName("ChargeDT")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckId")
                        .HasColumnName("CheckID");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContractId")
                        .HasColumnName("ContractID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CreateDT")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName");

                    b.Property<string>("DataTemp");

                    b.Property<string>("DepId")
                        .HasColumnName("DepID");

                    b.Property<string>("DxcontactPerson")
                        .HasColumnName("DXContactPerson");

                    b.Property<string>("Dxsurrogate")
                        .HasColumnName("DXSurrogate");

                    b.Property<DateTime?>("EditorDt")
                        .HasColumnName("EditorDT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EditorID");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("ExpContract");

                    b.Property<DateTime?>("ExpireDt")
                        .HasColumnName("ExpireDT")
                        .HasColumnType("datetime");

                    b.Property<string>("FtpPassword");

                    b.Property<string>("FtpUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(256);

                    b.Property<bool?>("Gender");

                    b.Property<string>("LinkAzure");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("MakerId")
                        .HasColumnName("MakerID");

                    b.Property<string>("Notes");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PriceCode");

                    b.Property<string>("RecordStatus");

                    b.Property<string>("SecurityStamp");

                    b.Property<DateTime?>("SignContractDt")
                        .HasColumnName("SignContractDT")
                        .HasColumnType("datetime");

                    b.Property<string>("SqlPass");

                    b.Property<string>("SqlUser");

                    b.Property<string>("Status");

                    b.Property<bool?>("StatusFramework");

                    b.Property<string>("Surrogate");

                    b.Property<string>("TaxCode");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<decimal?>("Value");

                    b.Property<string>("ValueString1");

                    b.Property<string>("ValueString2");

                    b.Property<string>("Website");

                    b.Property<string>("XmlTemp");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppUserClaim", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("AppUserId")
                        .HasColumnName("AppUser_Id")
                        .HasMaxLength(128);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Id");

                    b.HasKey("UserId");

                    b.HasIndex("AppUserId")
                        .HasName("IX_AppUser_Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppUserLogin", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("AppUserId")
                        .HasColumnName("AppUser_Id")
                        .HasMaxLength(128);

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.HasKey("UserId");

                    b.HasIndex("AppUserId")
                        .HasName("IX_AppUser_Id");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasMaxLength(128);

                    b.Property<string>("AppUserId")
                        .HasColumnName("AppUser_Id")
                        .HasMaxLength(128);

                    b.Property<int>("Id");

                    b.Property<string>("IdentityRoleId")
                        .HasColumnName("IdentityRole_Id")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AppUserId")
                        .HasName("IX_AppUser_Id");

                    b.HasIndex("IdentityRoleId")
                        .HasName("IX_IdentityRole_Id");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<double?>("Lat");

                    b.Property<double?>("Lng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Other");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.Property<string>("Website")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Footers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Footers");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Function", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("IconCss");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Status");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("URL")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("IX_ParentId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.MenuClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool?>("HomeFlag");

                    b.Property<int?>("HomeOrder");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MenuClients");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CustomerId")
                        .HasMaxLength(128);

                    b.Property<string>("CustomerMessage")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CustomerMobile")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(256);

                    b.Property<string>("PaymentStatus");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("IX_CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("ColorId");

                    b.Property<decimal>("Price");

                    b.Property<int>("Quantity");

                    b.Property<int>("SizeId");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ColorId")
                        .HasName("IX_ColorId");

                    b.HasIndex("OrderId")
                        .HasName("IX_OrderID");

                    b.HasIndex("ProductId")
                        .HasName("IX_ProductID");

                    b.HasIndex("SizeId")
                        .HasName("IX_SizeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OrderPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("AuthStatus1")
                        .HasColumnName("AuthStatus");

                    b.Property<string>("BankCode");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckId")
                        .HasColumnName("CheckID");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<string>("CodePricesPackages");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Data");

                    b.Property<string>("Data1");

                    b.Property<string>("Data2");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("ExpireDt")
                        .HasColumnName("ExpireDT")
                        .HasColumnType("datetime");

                    b.Property<string>("FtpPassword");

                    b.Property<string>("FtpUser");

                    b.Property<string>("FullName");

                    b.Property<int>("IdPackagePrices");

                    b.Property<int?>("IdUser");

                    b.Property<int?>("IdUserString");

                    b.Property<string>("IsCheckOut");

                    b.Property<bool>("IsHot");

                    b.Property<string>("IsSentMailExpired");

                    b.Property<string>("IsTrial");

                    b.Property<string>("LinkAzure");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<int>("MonthNumber");

                    b.Property<int>("Order");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(256);

                    b.Property<string>("PaymentStatus");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("SqlPass");

                    b.Property<string>("SqlUser");

                    b.Property<string>("Subdomain");

                    b.Property<decimal>("SumCheckout")
                        .HasColumnType("money");

                    b.Property<decimal>("SumRegister")
                        .HasColumnType("money");

                    b.Property<string>("Token");

                    b.Property<string>("UserName");

                    b.Property<string>("ValueString1");

                    b.Property<string>("ValueString2");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("OrderPackages");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OwOverviewEcommerce", b =>
                {
                    b.Property<int>("OverviewEcommerceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OVERVIEW_ECOMMERCE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Domain")
                        .HasColumnName("DOMAIN");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("NewsUsers")
                        .HasColumnName("NEWS_USERS");

                    b.Property<string>("Pageviews")
                        .HasColumnName("PAGEVIEWS");

                    b.Property<string>("Productaddstocart")
                        .HasColumnName("PRODUCTADDSTOCART");

                    b.Property<string>("Productcheckouts")
                        .HasColumnName("PRODUCTCHECKOUTS");

                    b.Property<string>("Productdetailviews")
                        .HasColumnName("PRODUCTDETAILVIEWS");

                    b.Property<string>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("Sessions")
                        .HasColumnName("SESSIONS");

                    b.Property<string>("Timeonpage")
                        .HasColumnName("TIMEONPAGE");

                    b.Property<string>("Transactionrevenue")
                        .HasColumnName("TRANSACTIONREVENUE");

                    b.Property<string>("Users")
                        .HasColumnName("USERS");

                    b.Property<string>("Version")
                        .HasColumnName("VERSION");

                    b.Property<int>("VersionInt")
                        .HasColumnName("VERSION_INT");

                    b.HasKey("OverviewEcommerceId");

                    b.ToTable("OW_OVERVIEW_ECOMMERCE");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OwPageBehaviorEcommerce", b =>
                {
                    b.Property<int>("PageBehaviorEcommerceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAGE_BEHAVIOR_ECOMMERCE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Dimensions")
                        .HasColumnName("DIMENSIONS");

                    b.Property<string>("Domain")
                        .HasColumnName("DOMAIN");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("ExitRate")
                        .HasColumnName("EXIT_RATE");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("PagePath")
                        .HasColumnName("PAGE_PATH");

                    b.Property<string>("PageValue")
                        .HasColumnName("PAGE_VALUE");

                    b.Property<string>("PageView")
                        .HasColumnName("PAGE_VIEW");

                    b.Property<string>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("TimeOnPage")
                        .HasColumnName("TIME_ON_PAGE");

                    b.Property<int>("VersionInt")
                        .HasColumnName("VERSION_INT");

                    b.HasKey("PageBehaviorEcommerceId");

                    b.ToTable("OW_PAGE_BEHAVIOR_ECOMMERCE");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OwProductlistPerformanceEcommerce", b =>
                {
                    b.Property<int>("ProductlistPerformanceEcommerceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRODUCTLIST_PERFORMANCE_ECOMMERCE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Dimensions")
                        .HasColumnName("DIMENSIONS");

                    b.Property<string>("Domain")
                        .HasColumnName("DOMAIN");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("ItemRevenue")
                        .HasColumnName("ITEM_REVENUE");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("ProductDetailViews")
                        .HasColumnName("PRODUCT_DETAIL_VIEWS");

                    b.Property<string>("Productlist")
                        .HasColumnName("PRODUCTLIST");

                    b.Property<string>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("QuantityAddedToCart")
                        .HasColumnName("QUANTITY_ADDED_TO_CART");

                    b.Property<string>("QuantityCheckedOut")
                        .HasColumnName("QUANTITY_CHECKED_OUT");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<int>("VersionInt")
                        .HasColumnName("VERSION_INT");

                    b.HasKey("ProductlistPerformanceEcommerceId");

                    b.ToTable("OW_PRODUCTLIST_PERFORMANCE_ECOMMERCE");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OwProductPerformace", b =>
                {
                    b.Property<int>("OverviewEcommerceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OVERVIEW_ECOMMERCE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Dimensions")
                        .HasColumnName("DIMENSIONS");

                    b.Property<string>("Domain")
                        .HasColumnName("DOMAIN");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("ItemRevenue")
                        .HasColumnName("ITEM_REVENUE");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("ProductDetailViews")
                        .HasColumnName("PRODUCT_DETAIL_VIEWS");

                    b.Property<string>("ProductName")
                        .HasColumnName("PRODUCT_NAME");

                    b.Property<string>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("QuantityAddedToCart")
                        .HasColumnName("QUANTITY_ADDED_TO_CART");

                    b.Property<string>("QuantityCheckedOut")
                        .HasColumnName("QUANTITY_CHECKED_OUT");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("Version")
                        .HasColumnName("VERSION");

                    b.Property<int>("VersionInt")
                        .HasColumnName("VERSION_INT");

                    b.HasKey("OverviewEcommerceId");

                    b.ToTable("OW_PRODUCT_PERFORMACE");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OwShoppingBehaviorEcommerce", b =>
                {
                    b.Property<int>("ShoppingBehaviorEcommerceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHOPPING_BEHAVIOR_ECOMMERCE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Dimensions")
                        .HasColumnName("DIMENSIONS");

                    b.Property<string>("Domain")
                        .HasColumnName("DOMAIN");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("ItemRevenue")
                        .HasColumnName("ITEM_REVENUE");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("ProductDetailViews")
                        .HasColumnName("PRODUCT_DETAIL_VIEWS");

                    b.Property<string>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("QuantityAddedToCart")
                        .HasColumnName("QUANTITY_ADDED_TO_CART");

                    b.Property<string>("QuantityCheckedOut")
                        .HasColumnName("QUANTITY_CHECKED_OUT");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("UserType")
                        .HasColumnName("USER_TYPE");

                    b.Property<int>("VersionInt")
                        .HasColumnName("VERSION_INT");

                    b.HasKey("ShoppingBehaviorEcommerceId");

                    b.ToTable("OW_SHOPPING_BEHAVIOR_ECOMMERCE");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OwTrafficSourceEcommerce", b =>
                {
                    b.Property<int>("TrafficSourceEcommerceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRAFFIC_SOURCE_ECOMMERCE_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Domain")
                        .HasColumnName("DOMAIN");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("Exits")
                        .HasColumnName("EXITS");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("Medium")
                        .HasColumnName("MEDIUM");

                    b.Property<string>("Pageviews")
                        .HasColumnName("PAGEVIEWS");

                    b.Property<string>("ProjectId")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("Sessionduration")
                        .HasColumnName("SESSIONDURATION");

                    b.Property<string>("Sessions")
                        .HasColumnName("SESSIONS");

                    b.Property<string>("Source")
                        .HasColumnName("SOURCE");

                    b.Property<string>("Transactionrevenue")
                        .HasColumnName("TRANSACTIONREVENUE");

                    b.Property<string>("Transactions")
                        .HasColumnName("TRANSACTIONS");

                    b.Property<string>("Version")
                        .HasColumnName("VERSION");

                    b.Property<int>("VersionInt")
                        .HasColumnName("VERSION_INT");

                    b.HasKey("TrafficSourceEcommerceId");

                    b.ToTable("OW_TRAFFIC_SOURCE_ECOMMERCE");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Content");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HoTen");

                    b.Property<string>("IdPackagePrices")
                        .HasMaxLength(100);

                    b.Property<string>("MaAdmin")
                        .HasMaxLength(128);

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("SoTaiKhoan")
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.Property<string>("ThongTinNganHang");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCreate");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanRead");

                    b.Property<bool>("CanUpdate");

                    b.Property<string>("FunctionId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RoleId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("FunctionId")
                        .HasName("IX_FunctionId");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.ToTable("GPermissions");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool?>("HomeFlag");

                    b.Property<int?>("HomeOrder");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("Link");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Content");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool?>("HomeFlag");

                    b.Property<bool?>("HotFlag");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasName("IX_CategoryID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.PostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool?>("HomeFlag");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnName("PostID");

                    b.Property<string>("TagId")
                        .HasColumnName("TagID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("PostId")
                        .HasName("IX_PostID");

                    b.HasIndex("TagId")
                        .HasName("IX_TagID");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("Banner1ImageLink");

                    b.Property<string>("Banner2ImageLink");

                    b.Property<string>("Banner3ImageLink");

                    b.Property<string>("Banner4ImageLink");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("Icon");

                    b.Property<string>("Image");

                    b.Property<string>("ImageFull");

                    b.Property<string>("ImageHorizontal");

                    b.Property<bool>("IsHot");

                    b.Property<string>("Link");

                    b.Property<string>("LinkAzure");

                    b.Property<string>("LinkBackupAzure");

                    b.Property<string>("LinkDocument");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("PackageName");

                    b.Property<double?>("Price12Month");

                    b.Property<double?>("Price1Month");

                    b.Property<double?>("Price24Month");

                    b.Property<double?>("Price3Month");

                    b.Property<double?>("Price6Month");

                    b.Property<double>("PriceValue");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("ShortDecription");

                    b.Property<string>("ValueHtml");

                    b.Property<string>("ValueString");

                    b.Property<string>("ValueString1");

                    b.Property<string>("ValueString2");

                    b.Property<string>("ValueString3");

                    b.Property<string>("ValueString4");

                    b.Property<string>("ValueString5");

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Content");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool?>("HomeFlag");

                    b.Property<bool?>("HotFlag");

                    b.Property<bool?>("IncludedVat")
                        .HasColumnName("IncludedVAT");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<decimal?>("OriginalPrice");

                    b.Property<decimal?>("Price");

                    b.Property<decimal?>("PromotionPrice");

                    b.Property<bool>("Status");

                    b.Property<string>("Tags");

                    b.Property<string>("ThumbnailImage")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ViewCount");

                    b.Property<int?>("Warranty");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasName("IX_CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool?>("HomeFlag");

                    b.Property<int?>("HomeOrder");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .HasMaxLength(250);

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasName("IX_ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ProductQuantity", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("SizeId");

                    b.Property<int>("ColorId");

                    b.Property<int>("Quantity");

                    b.HasKey("ProductId", "SizeId", "ColorId");

                    b.HasIndex("ColorId")
                        .HasName("IX_ColorId");

                    b.HasIndex("ProductId")
                        .HasName("IX_ProductId");

                    b.HasIndex("SizeId")
                        .HasName("IX_SizeId");

                    b.ToTable("ProductQuantities");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<string>("TagId")
                        .HasColumnName("TagID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("ProductId")
                        .HasName("IX_ProductID");

                    b.HasIndex("TagId")
                        .HasName("IX_TagID");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("Status");

                    b.Property<string>("Url")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.SupportOnline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department")
                        .HasMaxLength(50);

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Facebook")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Skype")
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.Property<string>("Yahoo")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SupportOnlines");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.SystemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<string>("ValueHtml");

                    b.Property<int?>("ValueInt");

                    b.Property<string>("ValueString");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.UserManual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<int?>("UserManualCategoryId");

                    b.Property<string>("ValueHtml");

                    b.Property<int?>("ValueInt");

                    b.Property<string>("ValueString");

                    b.HasKey("Id");

                    b.ToTable("UserManuals");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.UserManualCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool?>("HomeFlag");

                    b.Property<int?>("HomeOrder");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeyword")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("UserManualCategories");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.VideoInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.Property<string>("Slug");

                    b.Property<string>("Title");

                    b.Property<int>("VideoInstructionCategoryId");

                    b.Property<string>("YoutubeId");

                    b.HasKey("Id");

                    b.HasIndex("VideoInstructionCategoryId")
                        .HasName("IX_VideoInstructionCategoryId");

                    b.ToTable("VideoInstructions");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.VideoInstructionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApproveDt")
                        .HasColumnName("APPROVE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthStatus")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("CheckerId")
                        .HasColumnName("CHECKER_ID");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EditDt")
                        .HasColumnName("EDIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("EditorId")
                        .HasColumnName("EDITOR_ID");

                    b.Property<string>("MakerId")
                        .HasColumnName("MAKER_ID");

                    b.Property<string>("Name");

                    b.Property<int>("PriceId");

                    b.Property<string>("RecordStatus")
                        .HasColumnName("RECORD_STATUS");

                    b.HasKey("Id");

                    b.HasIndex("PriceId")
                        .HasName("IX_PriceId");

                    b.ToTable("VideoInstructionCategories");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.VisitorStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("VisitedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("VisitorStatistics");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Template.DemoTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("DemoTests");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Authorization.Roles.Role", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.Authorization.Users.User", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GSoft.AbpZeroTemplate.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Announcement", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppUser", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Announcements_dbo.AppUsers_AppUser_Id");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AnnouncementUser", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Announcement", "Announcement")
                        .WithMany("AnnouncementUsers")
                        .HasForeignKey("AnnouncementId")
                        .HasConstraintName("FK_dbo.AnnouncementUsers_dbo.Announcements_AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppUser", "User")
                        .WithMany("AnnouncementUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AnnouncementUsers_dbo.AppUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppUserClaim", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppUser", "AppUser")
                        .WithMany("AppUserClaims")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_dbo.AppUserClaims_dbo.AppUsers_AppUser_Id");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppUserLogin", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppUser", "AppUser")
                        .WithMany("AppUserLogins")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_dbo.AppUserLogins_dbo.AppUsers_AppUser_Id");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.AppUserRole", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_dbo.AppUserRoles_dbo.AppUsers_AppUser_Id");

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppRole", "IdentityRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("IdentityRoleId")
                        .HasConstraintName("FK_dbo.AppUserRoles_dbo.AppRoles_IdentityRole_Id");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Function", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Function", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_dbo.Functions_dbo.Functions_ParentId");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Order", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_dbo.Orders_dbo.AppUsers_CustomerId");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.OrderDetail", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Color", "Color")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_dbo.OrderDetails_dbo.Colors_ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_dbo.OrderDetails_dbo.Orders_OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_dbo.OrderDetails_dbo.Products_ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Size", "Size")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_dbo.OrderDetails_dbo.Sizes_SizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Permission", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Function", "Function")
                        .WithMany("Permissions")
                        .HasForeignKey("FunctionId")
                        .HasConstraintName("FK_dbo.Permissions_dbo.Functions_FunctionId");

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.AppRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.Permissions_dbo.AppRoles_RoleId");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Post", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.PostCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_dbo.Posts_dbo.PostCategories_CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.PostTag", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.PostTags_dbo.Posts_PostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_dbo.PostTags_dbo.Tags_TagID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.Product", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_dbo.Products_dbo.ProductCategories_CategoryID");
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ProductImage", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_dbo.ProductImages_dbo.Products_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ProductQuantity", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Color", "Color")
                        .WithMany("ProductQuantities")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_dbo.ProductQuantities_dbo.Colors_ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Product", "Product")
                        .WithMany("ProductQuantities")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_dbo.ProductQuantities_dbo.Products_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Size", "Size")
                        .WithMany("ProductQuantities")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_dbo.ProductQuantities_dbo.Sizes_SizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.ProductTag", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_dbo.ProductTags_dbo.Products_ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_dbo.ProductTags_dbo.Tags_TagID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.VideoInstruction", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.VideoInstructionCategory", "VideoInstructionCategory")
                        .WithMany("VideoInstructions")
                        .HasForeignKey("VideoInstructionCategoryId")
                        .HasConstraintName("FK_dbo.VideoInstructions_dbo.VideoInstructionCategories_VideoInstructionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GWebsite.AbpZeroTemplate.Core.Models.VideoInstructionCategory", b =>
                {
                    b.HasOne("GWebsite.AbpZeroTemplate.Core.Models.Price", "Price")
                        .WithMany("VideoInstructionCategories")
                        .HasForeignKey("PriceId")
                        .HasConstraintName("FK_dbo.VideoInstructionCategories_dbo.Prices_PriceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("GSoft.AbpZeroTemplate.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
